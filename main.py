import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler

TOKEN = "7831039981:AAEXX1yyZb44ZYEquV6K3C-_sb3yAg2ooZk"
logging.basicConfig(level=logging.INFO)

REGMID, REGEND, FINAL = range(3)
ATTENDANCE = 4


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç –ê–ô–¢–£—à–Ω–∏–∫! –Ø –≤–∞—à Aitu bot. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    commands = "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n/menu - –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã\n/stepa - —Å—á–∏—Ç–∞—Ç—å —Å—Ç–∏–ø–µ–Ω–¥–∏—é\n/attendance - –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å\n/syllabus - –ø–æ–ª—É—á–∏—Ç—å —Å–∏–ª–ª–∞–±—É—Å"
    await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n{commands}")


async def attendance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤:")
    return ATTENDANCE


async def process_attendance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.text.isdigit():
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return ATTENDANCE

    attendance = float(update.message.text)
    result = (1 - (attendance / 30)) * 100
    await update.message.reply_text(f"‚úÖ –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –¥–æ —Ñ–∞–π–Ω–∞–ª–∞: {result:.2f}%")
    return ConversationHandler.END


async def stepa(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –∑–∞ RegMid (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö):")
    return REGMID


async def process_regmid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.text.isdigit():
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!")
        return REGMID

    context.user_data["regmid"] = float(update.message.text)
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –∑–∞ RegEnd (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö):")
    return REGEND


async def process_regend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.text.isdigit():
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!")
        return REGEND

    context.user_data["regend"] = float(update.message.text)
    possible_score = 0.3 * context.user_data["regmid"] + 0.3 * context.user_data["regend"]
    required_final = (70 - possible_score) / 0.4

    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–ª", callback_data="enter_final")]])
    await update.message.reply_text(
        f"üí° –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–ø–µ–Ω–¥–∏—é (‚â•70%), –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞–±—Ä–∞—Ç—å {required_final:.2f}% –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —ç–∫–∑–∞–º–µ–Ω–µ.",
        reply_markup=keyboard
    )
    return FINAL


async def process_final(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.text.isdigit():
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!")
        return FINAL

    context.user_data["final"] = float(update.message.text)
    total_score = (0.3 * context.user_data["regmid"] + 0.3 * context.user_data["regend"] + 0.4 * context.user_data[
        "final"])

    if total_score >= 70:
        await update.message.reply_text(f"‚úÖ –í–∞—à –æ–±—â–∏–π –±–∞–ª–ª: {total_score:.2f}%. –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞ —Å—Ç–∏–ø–µ–Ω–¥–∏–∏! üéâ")
    else:
        await update.message.reply_text(
            f"‚ùå –í–∞—à –æ–±—â–∏–π –±–∞–ª–ª: {total_score:.2f}%. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ–≥–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Å—Ç–∏–ø–µ–Ω–¥–∏–∏.")
    return ConversationHandler.END


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "enter_final":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–ª:")
        return FINAL


async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")


async def calc(update, context):
    chat_id = update.message.chat_id
    document = open('syllabus/calc.pdf', 'rb')
    await context.bot.send_document(chat_id, document)

async def dm(update, context):
    chat_id = update.message.chat_id
    document = open('syllabus/dm.pdf', 'rb')
    await context.bot.send_document(chat_id, document)

async def itp(update, context):
    chat_id = update.message.chat_id
    document = open('syllabus/itp.pdf', 'rb')
    await context.bot.send_document(chat_id, document)

app = ApplicationBuilder().token(TOKEN).build()

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("stepa", stepa)],
    states={
        REGMID: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_regmid)],
        REGEND: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_regend)],
        FINAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_final)],
    },
    fallbacks=[]
)

attend_handler = ConversationHandler(
    entry_points=[CommandHandler("attendance", attendance)],
    states={ATTENDANCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_attendance)]},
    fallbacks=[]
)

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("menu", menu))
app.add_handler(CommandHandler("calc_syllabus", calc))
app.add_handler(CommandHandler("dm_syllabus", dm))
app.add_handler(CommandHandler("itp_syllabus", itp))
app.add_handler(attend_handler)
app.add_handler(conv_handler)
app.add_handler(CallbackQueryHandler(button_handler))
app.add_handler(MessageHandler(filters.COMMAND, unknown))

if __name__ == "__main__":
    app.run_polling()
